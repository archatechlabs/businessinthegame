rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to get user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to check if user is admin or higher
    function isAdmin(userId) {
      return getUserRole(userId) in ['admin', 'super-admin'];
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin(userId) {
      return getUserRole(userId) == 'super-admin';
    }
    
    // Helper function to check if user is moderator or higher
    function isModerator(userId) {
      return getUserRole(userId) in ['moderator', 'admin', 'super-admin'];
    }

    // Users collection
    match /users/{userId} {
      // Allow users to read/write their own document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admins to read all user documents
      allow read: if request.auth != null && isAdmin(request.auth.uid);
      
      // Allow super admins to write to any user document
      allow write: if request.auth != null && isSuperAdmin(request.auth.uid);
      
      // Allow admins to write to non-admin users
      allow write: if request.auth != null && 
        isAdmin(request.auth.uid) && 
        getUserRole(userId) in ['user', 'moderator'];
      
      // Allow public access to profiles marked as public (for public profile pages)
      // This rule allows anyone (even unauthenticated users) to read public profiles
      allow read: if resource.data.isPublic == true;
    }
    
    // Events collection - allow all authenticated users to read
    match /events/{eventId} {
      allow read: if request.auth != null;
      
      // Only admins and moderators can create/update/delete events
      allow write: if request.auth != null && isModerator(request.auth.uid);
    }
    
    // Tickets collection - users can manage their own tickets
    match /tickets/{ticketId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
        
      // Admins can read all tickets
      allow read: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Friends collection - allow users to manage their own friend relationships
    match /friends/{friendId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId1 || request.auth.uid == resource.data.userId2);
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.userId1 || request.auth.uid == request.resource.data.userId2);
    }

    // Friend requests collection - allow users to manage their own friend requests
    match /friendRequests/{requestId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.fromUserId;
    }

    // Conversations collection - allow users to access conversations they participate in
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      
      // Messages subcollection within conversations
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow write: if request.auth != null && 
          request.auth.uid == resource.data.senderId;
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.senderId;
      }
    }

    // Alternative messages collection (if using flat structure)
    match /messages/{messageId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
    }
    
    // Streams collection - temporarily allow all access for testing
    match /streams/{streamId} {
      // Allow all access for now (temporary for testing)
      allow read, write: if true;
    }
    
    // Stream requests collection - allow authenticated users to create and read
    match /streamRequests/{requestId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    // Emoji reactions collection - allow authenticated users to create and read
    match /emojiReactions/{reactionId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    // System settings - only super admins can access
    match /systemSettings/{settingId} {
      allow read, write: if request.auth != null && isSuperAdmin(request.auth.uid);
    }
    
    // Analytics - admins and moderators can read
    match /analytics/{analyticsId} {
      allow read: if request.auth != null && isModerator(request.auth.uid);
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Audit logs - only admins can read
    match /auditLogs/{logId} {
      allow read: if request.auth != null && isAdmin(request.auth.uid);
      allow create: if request.auth != null; // Any authenticated user can create audit logs
    }
  }
}
